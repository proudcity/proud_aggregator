<?php


/**
 * Implements hook_menu().
 */
function proud_aggregator_menu() {
  $items['admin/config/proud/social-app'] = array(
    'title' => 'Proud social app settings',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('configure proud'),
    'page arguments' => array('proud_aggregator_admin_form'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'proud_aggregator.admin.inc',
  );

  return $items;
}


/**
 * Returns a json array for a Drupal entity field.
 */
function proud_aggregator_json_field($field, $title, $delete_mode = TRUE) {
  $agency = array(
    'name' => _proud_aggregator_sanitize_key($title),
    'delete_mode' => $delete_mode,
  );
  foreach($field[LANGUAGE_NONE] as $item) {
    $exploded = explode('/', $item['url']);
    $agency[$item['service']] = empty($agency[$item['service']]) ? array('feeds' => array()) : $agency[$item['service']];
    $agency[$item['service']]['feeds'][] = array(
      'type' => 'account',
      'query' => array_pop($exploded),
    );
  }
  return array(
    'name' => _proud_aggregator_username(),
    'agencies' => array($agency),
  );
}

/**
 * Returns a json array for a string.
 */
function proud_aggregator_json_string($string, $title, $delete_mode = TRUE) {
  $string = trim($string);
  $arr = explode("\n", $string);
  $arr = array_filter($arr, 'trim'); // remove any extra \r characters left behind

  $agency = array(
    'name' => _proud_aggregator_sanitize_key($title),
    'delete_mode' => $delete_mode,
  );

  foreach ($arr as $line) {
    $line = explode(':', $line);
    $title = $line[1];
    $options = explode('|', $line[0]);
    $arg = $options[1];
    $service = is_array($options) ? $options[0] : $options;
    $data = array();
    switch ($service) {
      case 'foursquare': 
        $data = array(
          'type' => $title,
          'url' => 'query',
        );
        break;
      case 'socrata': 
      case 'gtfs':
        $data = array(
          'type' => $title,
          'url' => $arg,
        );
        break;
      case 'rss':
      case 'ical':
      case 'yelp':
        $data = array(
          'type' => $title,
          'location' => $arg,
        );
        break;
    }
    $agency[$service] = empty($agency[$service]) ? array('feeds' => array()) : $agency[$service];
    $agency[$service]['feeds'][] = $data;

    // Open311 is a little different
    if ($service == 'open311') {
      foreach(explode($arg) as $subarg) {
        $agency[$service]['feeds'][] = array('status' => $arg);
      }
    }
  } // foreach

  return array(
    'name' => _proud_aggregator_username(),
    'agencies' => array($agency),
  );
}



/**
 * Implements hook_node_update().
 */
function proud_aggregator_api($endpoint, $data) {
  $data_string = json_encode($data);
  //$url = 'http://' . 'proudCity:UM0o2aBUbtrsunGm2lvtnSFkz@' . str_replace('http://', '', variable_get('proud_aggregator_url', 'my.getproudcity.com:8080')) . $endpoint;
  $user = variable_get('proud_aggregator_key', '') .':'. variable_get('proud_aggregator_secret', '');
  $url = 'http://' . str_replace('http://', '', variable_get('proud_aggregator_url', 'my.getproudcity.com:8080')) . $endpoint;

  $ch = curl_init();
  $options = array(
      CURLOPT_URL            => $url,
      CURLOPT_RETURNTRANSFER => true,
      CURLOPT_HEADER         => true,
      CURLOPT_FOLLOWLOCATION => true,
      CURLOPT_ENCODING       => "",
      CURLOPT_AUTOREFERER    => true,
      CURLOPT_CONNECTTIMEOUT => 120,
      CURLOPT_TIMEOUT        => 120,
      CURLOPT_MAXREDIRS      => 10,
      CURLOPT_CUSTOMREQUEST  => "POST",
      CURLOPT_POSTFIELDS     => $data_string,
      CURLOPT_USERPWD        => $user,
      CURLOPT_HTTPAUTH       => CURLAUTH_BASIC,
      curl_setopt($ch, CURLOPT_HTTPHEADER, array(                                                                          
        'Content-Type: application/json'
      )),
  );
  curl_setopt_array($ch, $options);
  $response = curl_exec($ch);


/*
$options = array(
  'method' => 'POST',
  'data' => $data_string,
  'headers' => array('Accept' => 'application/json'),
);

$result = drupal_http_request($url, $options);
  */
  //drupal_http_request($url, array $options = array())

  dpm($response);
}


/**
 * Helper. Returns the username string for the current city.
 * @todo: make this more general (with a hook system)
 */
function _proud_aggregator_username() {
  return variable_get('proudcity_city', '') .',_'. variable_get('proudcity_state', '');
}

/**
 * Helper. Returns the username string for the current city.
 * @todo: make this more general (with a hook system)
 */
function _proud_aggregator_sanitize_key($title) {
  return str_replace('-', '_', drupal_html_class($title));
}
